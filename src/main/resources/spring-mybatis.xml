<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/context 
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 注解扫描包 -->
	<context:component-scan base-package="com.nibudong" />
	<!-- 加载jdbc.properties文件 -->

	<context:property-placeholder location="classpath:jdbc.properties" />
	<!--第一步: 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${user}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>
	<!-- 配置和mybatis的整合 -->
	<!--第二步: 创建sqlSessionFactory工厂 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 指定Mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property> 
		<!-- <property name="mapperLocations" value="classpath:com/itlaobing/nibudong/mapper/*.xml"></property> --> 
	</bean>
	<!-- 配置mybatis的代理接口开发 * 接口类名和映射文件必须同名 * 接口类和映射文件必须在同一个目 录下 * 接口的映射文件的namespace名称必须是接口的全限定名 
		* 接口的方法名必须和映射的statement的id一致 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口的实现，加入到ioc容器中 -->
		<property name="basePackage" value="com.nibudong.mapper"></property>
		<property name="SqlSessionFactoryBeanName" value="sessionFactory" />
	</bean>

	<!-- 事务 -->
	<!-- 事务配置2：配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
	<!-- 事务配置2：打开事务驱动器 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 事务配置3：声明式事物管理 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
	        <tx:method name="get*" read-only="true" />
	        <tx:method name="find*" read-only="true" />
	        <tx:method name="load*" read-only="true" />
	        <tx:method name="query*" read-only="true" />
	        <tx:method name="add*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="save*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="insert*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="update*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="modify*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="delete*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="del*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="registe*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="approve*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="clear*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="set*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="reset*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <tx:method name="getUpdate*" read-only="false" rollback-for="Exception" propagation="REQUIRED"/>
	        <!-- <tx:method name="*" read-only="true"/> -->
        </tx:attributes>
    </tx:advice>
	
	<!-- 事务配置4： 将事务的碎片织入到切入点-->
	 <aop:config>
		<aop:pointcut id="mypointcut" expression="execution(* com.nibudong.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="mypointcut" />
	</aop:config>
</beans>